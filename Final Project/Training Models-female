{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pickle\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score, roc_auc_score, plot_roc_curve\n",
    "from sklearn.model_selection import validation_curve\n",
    "\n",
    "from sklearn import model_selection\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.under_sampling import NearMiss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns',None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pos_final_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import cleaned dataset\n",
    "### Simple model using just Abn% + demographics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "pos_final_test = pd.read_csv('../data/pos_KNN_final_test_trimmed_female.csv.gz', compression='gzip')\n",
    "\n",
    "non_lab_cols = [ 'age',\\\n",
    "                'ethnicity_AMERICAN INDIAN/ALASKA NATIVE', 'ethnicity_ASIAN','ethnicity_BLACK/AFRICAN AMERICAN', 'ethnicity_HISPANIC/LATINO','ethnicity_OTHER', 'ethnicity_UNKNOWN',\\\n",
    "                'ed_length', 'insurance_Medicare','insurance_Medicaid'\\\n",
    "               'pneumoia', 'diabetes','hypertension' ,'atherosclero','renal_failure' ,'arrhythmia']\n",
    "model_cols = pos_final_test.columns.str.contains('max')|pos_final_test.columns.str.contains('min')|pos_final_test.columns.str.contains('abn')|pos_final_test.columns.str.contains('mean') | pos_final_test.columns.str.contains('below') |pos_final_test.columns.str.contains('above') | pos_final_test.columns.isin(non_lab_cols)\n",
    "hadm_features = pos_final_test.loc[:, model_cols]\n",
    "hadm_target = pos_final_test.loc[:, 'pos']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8713,)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# hadm_features.corr()\n",
    "hadm_target.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = model_selection.train_test_split(hadm_features, hadm_target, test_size=.2, stratify=hadm_target, random_state=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Over and under sample the train set\n",
    "sm = SMOTE()\n",
    "X_res_over, y_res_over = sm.fit_resample(X_train, y_train)\n",
    "\n",
    "nm = NearMiss()\n",
    "X_res_under, y_res_under = nm.fit_resample(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Target=0:  7551\n",
      "Target=1:  1162\n"
     ]
    }
   ],
   "source": [
    "# check target counts\n",
    "print('Target=0: ',hadm_target[hadm_target==0].count())\n",
    "print('Target=1: ',hadm_target[hadm_target==1].count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1333639389418111"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1162/(7551+1162)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions used in this notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def results(model):\n",
    "    '''\n",
    "    Function to report on the metrics of a GridSearch model.\n",
    "    Input: GridSearchCV model\n",
    "    Prints: CV score, best parameters, accuracy, precision, recall, F1, confusion matrix and ROCAUC\n",
    "    '''\n",
    "    \n",
    "#     cross validation scores\n",
    "    print(\"Cross Validation\")\n",
    "    print(\"-\" * 20)\n",
    "    print(\"Best parameter: \", model.best_params_)\n",
    "    print(\"Best CV score:  %.4f\" % model.best_score_)\n",
    "\n",
    "#     confusion matrix & related scores\n",
    "    pred = model.best_estimator_.predict(X_test)\n",
    "    print(f\"Accuracy Score: {accuracy_score(y_test, pred) * 100:.2f}%\")\n",
    "    print(\"_______________________________________________\")\n",
    "    print(\"Classification Report:\", end='')\n",
    "    print(f\"\\tPrecision Score: {precision_score(y_test, pred) * 100:.2f}%\")\n",
    "    print(f\"\\t\\t\\tRecall Score: {recall_score(y_test, pred) * 100:.2f}%\")\n",
    "    print(f\"\\t\\t\\tF1 score: {f1_score(y_test, pred) * 100:.2f}%\")\n",
    "    print(f\"\\t\\t\\tROC_AUC score: {roc_auc_score(y_test, pred) * 100:.2f}%\")\n",
    "    print(\"_______________________________________________\")\n",
    "    print(f\"Confusion Matrix: \\n {confusion_matrix(y_test, pred)}\\n\")\n",
    "    \n",
    "    svc_disp = plot_roc_curve(model, X_test, y_test)\n",
    "    plt.show()\n",
    "    \n",
    "    if model.estimator.__class__== sklearn.linear_model._logistic.LogisticRegression:\n",
    "        est_coefs = pd.Series(model.best_estimator_.coef_[0], index=X_train.columns)\n",
    "        sortedCoefs = np.abs(est_coefs).sort_values(ascending=False)\n",
    "        print(sortedCoefs[sortedCoefs > 0].head(25))\n",
    "      \n",
    "    else:\n",
    "        est_coefs = pd.Series(model.best_estimator_.feature_importances_, index=X_train.columns)\n",
    "        sortedCoefs = est_coefs.sort_values(ascending=False)\n",
    "        print(sortedCoefs.head(25))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def change_threshold(model, threshold_list, X=X_test):\n",
    "    '''\n",
    "    Input a model and threshold_list.\n",
    "    Output scores based on prediction made with threshold list.\n",
    "    '''\n",
    "    metrics = pd.DataFrame(columns = ['Threshold','F1','ROC_AUC','Recall','Accuracy','Precision'])\n",
    "    \n",
    "    for threshold in threshold_list:\n",
    "        prob = model.best_estimator_.predict_proba(X)[:,1]\n",
    "        pred = np.where(prob>threshold,1,0)\n",
    "\n",
    "\n",
    "        f1 = f1_score(y_test, pred)\n",
    "        roc_auc = roc_auc_score(y_test, pred)\n",
    "        recall = recall_score(y_test, pred)\n",
    "        accuracy = accuracy_score(y_test, pred)\n",
    "        precision = precision_score(y_test, pred)\n",
    "#         confusion_matrix(y_test, pred)\n",
    "\n",
    "        metrics = metrics.append({'Threshold':threshold,\n",
    "                                  'F1':f1,\n",
    "                                  'ROC_AUC':roc_auc,\n",
    "                                  'Recall':recall,\n",
    "                                  'Accuracy':accuracy,\n",
    "                                  'Precision':precision\n",
    "                                 }\n",
    "                                 ,ignore_index=True)\n",
    "        \n",
    "    plt.plot(metrics.Threshold, metrics.Recall, label='Recall', color='green')\n",
    "    plt.plot(metrics.Threshold, metrics.Precision, label='Precision', color='blue')\n",
    "    plt.plot(metrics.Threshold, metrics.ROC_AUC, label='ROC_AUC', color='red')\n",
    "    plt.legend()\n",
    "    plt.xlabel('Threshold')\n",
    "    plt.ylabel('Scores')\n",
    "    return metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_val_curve(estimator, feature, feature_range, X, y):\n",
    "    '''\n",
    "    Plots validation curve for an estimator and a feature for a specified feature range.\n",
    "    Used to determine range of feature to use for hyperparameter tuning for GridSearchCV.\n",
    "    '''\n",
    "    train_scores, valid_scores = validation_curve(estimator, \n",
    "                                                  X,y,\n",
    "                                                  feature,\n",
    "                                                  feature_range, \n",
    "                                                  scoring='roc_auc',cv=3)\n",
    "    plt.plot(feature_range,train_scores)\n",
    "    plt.plot(feature_range,valid_scores,linestyle='--')\n",
    "    plt.xlabel(feature)\n",
    "    plt.ylabel('roc_auc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gather_best_features(model_list):\n",
    "    best_features = pd.DataFrame()\n",
    "\n",
    "    for model, model_name, X in model_list:\n",
    "        if model.estimator.__class__== sklearn.linear_model._logistic.LogisticRegression:\n",
    "            est_coefs = pd.Series(model.best_estimator_.coef_[0], index=X.columns)\n",
    "        else:\n",
    "            est_coefs = pd.Series(model.best_estimator_.feature_importances_, index=X.columns)\n",
    "            \n",
    "        sortedCoefs = np.abs(est_coefs).sort_values(ascending=False)\n",
    "        sorted_df = pd.DataFrame(sortedCoefs).reset_index().rename(columns={\"index\":'features', 0: model_name})\n",
    "        best_features = pd.concat([best_features, sorted_df], axis=1)\n",
    "    return best_features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 106 µs, sys: 8 µs, total: 114 µs\n",
      "Wall time: 118 µs\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "params ={'C':np.linspace(1e-2,1,20)}\n",
    "logReg = LogisticRegression(penalty = 'l1', max_iter = 2000, class_weight = \"balanced\", solver = 'liblinear')\n",
    "\n",
    "# grid_log = GridSearchCV(estimator = logReg, param_grid = params, cv = 3, scoring='roc_auc')\n",
    "# grid_log.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "threshold_list = np.linspace(0.01,0.5,10)\n",
    "# change_threshold(grid_log, threshold_list, X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFECV\n",
    "selector = RFECV(logReg, step=1, cv=5, scoring ='roc_auc')\n",
    "selector = selector.fit(X_train, y_train)\n",
    "# selector.support_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3,\n",
       "             estimator=LogisticRegression(class_weight='balanced',\n",
       "                                          max_iter=2000, penalty='l1',\n",
       "                                          solver='liblinear'),\n",
       "             param_grid={'C': array([0.01      , 0.06210526, 0.11421053, 0.16631579, 0.21842105,\n",
       "       0.27052632, 0.32263158, 0.37473684, 0.42684211, 0.47894737,\n",
       "       0.53105263, 0.58315789, 0.63526316, 0.68736842, 0.73947368,\n",
       "       0.79157895, 0.84368421, 0.89578947, 0.94789474, 1.        ])},\n",
       "             scoring='roc_auc')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_reduced = X_train.iloc[:,selector.support_]\n",
    "grid_log_reduced = GridSearchCV(estimator = logReg, param_grid = params, cv = 3, scoring='roc_auc')\n",
    "grid_log_reduced.fit(X_reduced, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                                                   0.814697\n",
       "diabetes                                              0.623003\n",
       "hypertension                                          0.585222\n",
       "('max', 'Anion Gap - Blood - Chemistry')              0.563543\n",
       "('max', 'Bicarbonate - Blood - Chemistry')            0.535342\n",
       "                                                        ...   \n",
       "('above_max', 'Urea Nitrogen - Blood - Chemistry')    0.018949\n",
       "('below_min', 'Magnesium - Blood - Chemistry')        0.017881\n",
       "('min', 'Troponin T - Blood - Chemistry')             0.017101\n",
       "('above_max', 'Potassium - Blood - Chemistry')        0.015266\n",
       "('below_min', 'Bicarbonate - Blood - Chemistry')      0.010828\n",
       "Length: 77, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "est_coefs = pd.Series(grid_log_reduced.best_estimator_.coef_[0], index=X_reduced.columns)\n",
    "sortedCoefs = np.abs(est_coefs).sort_values(ascending=False)\n",
    "sortedCoefs[sortedCoefs>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_reduced = X_test.iloc[:,selector.support_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[540, 971],\n",
       "       [ 10, 222]])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "threshold = 0.108\n",
    "confusion_matrix(y_test,np.where(grid_log_reduced.best_estimator_.predict_proba(X_test_reduced)[:,1]>threshold,1,0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Threshold</th>\n",
       "      <th>F1</th>\n",
       "      <th>ROC_AUC</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.306849</td>\n",
       "      <td>0.650528</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.419392</td>\n",
       "      <td>0.182410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.105263</td>\n",
       "      <td>0.309839</td>\n",
       "      <td>0.654491</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.432587</td>\n",
       "      <td>0.184846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.110526</td>\n",
       "      <td>0.313559</td>\n",
       "      <td>0.660116</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.442341</td>\n",
       "      <td>0.187500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.115789</td>\n",
       "      <td>0.318966</td>\n",
       "      <td>0.668058</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.456110</td>\n",
       "      <td>0.191379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.121053</td>\n",
       "      <td>0.322440</td>\n",
       "      <td>0.673021</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.464716</td>\n",
       "      <td>0.193886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.126316</td>\n",
       "      <td>0.325991</td>\n",
       "      <td>0.677985</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.473322</td>\n",
       "      <td>0.196460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.131579</td>\n",
       "      <td>0.330112</td>\n",
       "      <td>0.683610</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.483075</td>\n",
       "      <td>0.199461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.136842</td>\n",
       "      <td>0.334337</td>\n",
       "      <td>0.689236</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.492828</td>\n",
       "      <td>0.202555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.142105</td>\n",
       "      <td>0.339190</td>\n",
       "      <td>0.695523</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.503729</td>\n",
       "      <td>0.206128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.147368</td>\n",
       "      <td>0.344453</td>\n",
       "      <td>0.702141</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.515204</td>\n",
       "      <td>0.210028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.152632</td>\n",
       "      <td>0.347690</td>\n",
       "      <td>0.706112</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.522088</td>\n",
       "      <td>0.212440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.157895</td>\n",
       "      <td>0.350434</td>\n",
       "      <td>0.709421</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.527826</td>\n",
       "      <td>0.214493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.163158</td>\n",
       "      <td>0.351719</td>\n",
       "      <td>0.709743</td>\n",
       "      <td>0.948276</td>\n",
       "      <td>0.534710</td>\n",
       "      <td>0.215898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.168421</td>\n",
       "      <td>0.355699</td>\n",
       "      <td>0.714376</td>\n",
       "      <td>0.948276</td>\n",
       "      <td>0.542742</td>\n",
       "      <td>0.218905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.173684</td>\n",
       "      <td>0.359771</td>\n",
       "      <td>0.719009</td>\n",
       "      <td>0.948276</td>\n",
       "      <td>0.550775</td>\n",
       "      <td>0.221998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.178947</td>\n",
       "      <td>0.360791</td>\n",
       "      <td>0.719501</td>\n",
       "      <td>0.943966</td>\n",
       "      <td>0.554791</td>\n",
       "      <td>0.223014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.184211</td>\n",
       "      <td>0.365915</td>\n",
       "      <td>0.725126</td>\n",
       "      <td>0.943966</td>\n",
       "      <td>0.564544</td>\n",
       "      <td>0.226943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.189474</td>\n",
       "      <td>0.370558</td>\n",
       "      <td>0.730090</td>\n",
       "      <td>0.943966</td>\n",
       "      <td>0.573150</td>\n",
       "      <td>0.230526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.194737</td>\n",
       "      <td>0.372968</td>\n",
       "      <td>0.731906</td>\n",
       "      <td>0.939655</td>\n",
       "      <td>0.579461</td>\n",
       "      <td>0.232657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.375433</td>\n",
       "      <td>0.733721</td>\n",
       "      <td>0.935345</td>\n",
       "      <td>0.585772</td>\n",
       "      <td>0.234848</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Threshold        F1   ROC_AUC    Recall  Accuracy  Precision\n",
       "0    0.100000  0.306849  0.650528  0.965517  0.419392   0.182410\n",
       "1    0.105263  0.309839  0.654491  0.956897  0.432587   0.184846\n",
       "2    0.110526  0.313559  0.660116  0.956897  0.442341   0.187500\n",
       "3    0.115789  0.318966  0.668058  0.956897  0.456110   0.191379\n",
       "4    0.121053  0.322440  0.673021  0.956897  0.464716   0.193886\n",
       "5    0.126316  0.325991  0.677985  0.956897  0.473322   0.196460\n",
       "6    0.131579  0.330112  0.683610  0.956897  0.483075   0.199461\n",
       "7    0.136842  0.334337  0.689236  0.956897  0.492828   0.202555\n",
       "8    0.142105  0.339190  0.695523  0.956897  0.503729   0.206128\n",
       "9    0.147368  0.344453  0.702141  0.956897  0.515204   0.210028\n",
       "10   0.152632  0.347690  0.706112  0.956897  0.522088   0.212440\n",
       "11   0.157895  0.350434  0.709421  0.956897  0.527826   0.214493\n",
       "12   0.163158  0.351719  0.709743  0.948276  0.534710   0.215898\n",
       "13   0.168421  0.355699  0.714376  0.948276  0.542742   0.218905\n",
       "14   0.173684  0.359771  0.719009  0.948276  0.550775   0.221998\n",
       "15   0.178947  0.360791  0.719501  0.943966  0.554791   0.223014\n",
       "16   0.184211  0.365915  0.725126  0.943966  0.564544   0.226943\n",
       "17   0.189474  0.370558  0.730090  0.943966  0.573150   0.230526\n",
       "18   0.194737  0.372968  0.731906  0.939655  0.579461   0.232657\n",
       "19   0.200000  0.375433  0.733721  0.935345  0.585772   0.234848"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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M844g6VLl2JmPPDAAyxYsIA77rgjo+3JNCUCERHg4MGDVFZWsmnTJk499VSmTp0KBIngmWeeYcKE4AWK+/bt4+233+b111/n4osvpqSkBIABAwYAwa2wM2fOZOvWrdTW1rbrNs5sUSIQkaNKunvumRa/RrB7926++MUvsnDhQq666ircneuvv55vf/vbTerffffdKe/QmTt3Ltdccw3Tp0/nxRdf5MYbb+yiFnRcWk8mmdkMMyuMlb9nZv9qZqeEG5qISNfr168fd999N7fffjuHDx/mc5/7HA8++CD7YrePv//++3z00Uece+65PPnkk2zfvh3gyKmh3bt3U1ZWBsDPf/7z7DSindJ9RPUf3H2vmZ0BfA74OfDT8MISEcmeCRMmUFFRwaJFizjvvPP48pe/zKRJkxg/fjwXX3wxe/fu5cQTT2T+/PmcffbZVFRUcM011wBw4403MmPGDM4888wjp42OdmkNQ21mr7n7BDP7J+ANd38sviz8EJvSMNQix541a9YwduzYbIdxzEj192xtGOp0jwjeN7P7gC8BS8ysVzu+KyIiR7F0O/MvEbxpbJq77wIGAN9t60tmNs3M1prZejOb10KdL5nZajNbZWaPpR25iIhkRFp3Dbn7ATP7CDgDeBuoi322yMxygIXAVIIX2S8zs8XuvjqhzijgemCyu+80s+M61gwREemodO8a+kfgOoJOGyAX+EUbXzsdWO/uG929FlgEXJBU56+Bhe6+E8DdP0o3cBERyYx0Tw1dCEwH9gO4+xagsI3vlAGbE+arY8sSnQCcYGYvm9lSM5uWZjwiIpIh6T5QVuvubmYOYGbpDLeZavS25FuUegKjgClAOfB7Mzspdh2icUNms4HZAEOHDk0zZBERSUe6RwRPxu4aKjazvwaeA/65je9UA0MS5suBLSnq/MbdD7v7O8BagsTQhLvf7+5V7l5VWlqaZsgiIunLycmhsrKSk046iRkzZnDgwIFOb3P58uVcddVVLa7fsmULF198cad/p7PSSgTufjvwK+DXwGjgBnf/SRtfWwaMMrMRZpYHXAIsTqrz78BfAJhZCcGpoo3phy8ikhnxISbefPNN8vLy+NnPftZkvbvTkOqtg62oqqri7rvvbnH98ccfz69+9asOxZtJbSYCM8sxs+fc/Vl3/667X+vuz7b1PXevA+YQ3Ha6BnjS3VeZ2c1mNj1W7Wlgu5mtBl4Avuvu2zveHBGRzjvzzDNZv349mzZtYuzYsVxxxRWccsopbN68mWeeeYZJkyZxyimnMGPGjCNDTyxbtozPfOYzVFRUcPrpp7N3715efPFFvvjFLwLwu9/9jsrKSiorK5kwYQJ79+5l06ZNnHTSSUDwus7LLruM8ePHM2HCBF544QUgeKHNRRddxLRp0xg1ahR///d/n/H2tnmNwN3rzeyAmfVz993t2bi7LwGWJC27IaHswDWxSUSEq6+GFZkdhZrKSrgrzbHs6urqeOqpp5g2Lbh3Ze3atfzLv/wL9957Lx9//DG33HILzz33HH369OG2227jzjvvZN68ecycOZMnnniC0047jT179lBQUNBku7fffjsLFy5k8uTJ7Nu3j/z8/CbrFy5cCMAbb7zBW2+9xXnnnce6desAWLFiBa+99hq9evVi9OjRzJ07lyFDhpAp6V4srgHeMLNnid05BODuLZ/8EhHpRuLDUENwRHD55ZezZcsWhg0bxsSJEwFYunQpq1evZnLsJVe1tbVMmjSJtWvXMnjwYE477TQAioqKmm1/8uTJXHPNNXzlK1/hoosuory8vMn6P/zhD8ydOxeAMWPGMGzYsCOJ4Nxzz6Vfv34AjBs3jnfffTcrieC/YpOISKjS3XPPtMRXVSbqk/BOcndn6tSpPP74403qrFy5ss2Xxs+bN48vfOELLFmyhIkTJ/Lcc881OSpobdy3Xr16HSnn5ORQV1fXZnvaI92LxT8HHgdejU2PxZaJiETGxIkTefnll1m/fj0ABw4cYN26dYwZM4YtW7awbNkyAPbu3duss96wYQPjx4/nuuuuo6qqirfeeqvJ+rPOOotHH30UgHXr1vHee+8xevToLmhV+k8WTyEYUmIhcC+wzszOCjEuEZGjTmlpKQ899BCzZs3i5JNPZuLEibz11lvk5eXxxBNPMHfuXCoqKpg6dSo1NTVNvnvXXXdx0kknUVFRQUFBAeeff36T9VdccQX19fWMHz+emTNn8tBDDzU5EghTusNQvwp82d3XxuZPAB5391NDjq8ZDUMtcuzRMNSZFdYw1LnxJADg7usIxhsSEZFuLt2LxcvN7P8Bj8Tmv0JwrUBERLq5dBPBd4ArgasIxhB6ieBagYiIdHPpJoKewI/d/U448q6BrrmKISIioUr3GsHzQOJjcgUEA8+JiEg3l24iyHf3ffGZWLl3OCGJiEhXSjcR7DezU+IzZlYFHAwnJBER6UrpJoKrgV+a2e/N7CWC107OCS8sEZGulfg+gr/8y79k167G92OtWrWKc845hxNOOIFRo0bx/e9/v8mQEE899RRVVVWMHTuWMWPGcO2117b5exUVFcyaNavJsilTppD4nFTi6KQAr7zyCmeddRajR49mzJgxfOtb38rIexNaTQRmdpqZfcLdlwFjgCcIXlz/38A7nf51EZGjROL7CAYMGHBkNNCDBw8yffp05s2bx7p163j99df54x//yL33BjdOvvnmm8yZM4df/OIXrFmzhjfffJNPfvKTrf7WmjVraGho4KWXXmL//v2t1o378MMPmTFjBrfddhtr165lzZo1TJs2jb1793au4bR919B9wGdj5UnA/wHmApXA/UD2X60jIseWbI9DDUyaNImVK1cC8NhjjzF58mTOO+88AHr37s0999zDlClTuPLKK1mwYAHz589nzJgxAPTs2ZMrrrii1e0/9thjfO1rX2PNmjUsXry42ZFBKgsXLuTSSy9l0qRJAJhZxt5u1tapoRx33xErzwTud/dfu/s/AJ/KSAQiIkeR+vp6nn/+eaZPD96ftWrVKk49teloOiNHjmTfvn3s2bOHN998s9n6tjzxxBPMnDmTWbNmNRvJtCUd+Z10tXVEkGNmPWNvGzuX2Avk0/wuZjYN+DGQAzzg7j9IWv8N4IfA+7FF97j7A2nGLiLHoiyNQx1/H8GmTZs49dRTmTp1KhAMD93SENNtDT2dyrJlyygtLWXYsGGUl5fzzW9+k507d9K/f/+U2+vIb7RXW0cEjwO/M7PfENwl9HsAM/sU0OrbymIPnS0EzgfGAbPMbFyKqk+4e2VsUhIQkayIXyN49913qa2tPXKN4MQTTyR5oMuNGzfSt29fCgsLOfHEE3n11fRH3Hn88cd56623GD58OCNHjmTPnj38+te/BmDgwIHs3LnzSN0dO3ZQUlJyJI72/E67uHurEzARuBDok7DsBOCUNr43CXg6Yf564PqkOt8gOApoM474dOqpp7qIHFtWr16d7RC8T58+R8p//vOffciQIV5bW+sHDhzwESNG+LPPPuvu7gcOHPAvfOELfvfdd7u7++uvv+4jR470tWvXurt7fX2933HHHSl/o76+3svLy726uvrIst/+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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "threshold_list = np.linspace(0.1,0.2,20)\n",
    "change_threshold(grid_log_reduced, threshold_list,X_test_reduced)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3,\n",
       "             estimator=LogisticRegression(class_weight='balanced',\n",
       "                                          max_iter=2000, penalty='l1',\n",
       "                                          solver='liblinear'),\n",
       "             param_grid={'C': array([0.01      , 0.06210526, 0.11421053, 0.16631579, 0.21842105,\n",
       "       0.27052632, 0.32263158, 0.37473684, 0.42684211, 0.47894737,\n",
       "       0.53105263, 0.58315789, 0.63526316, 0.68736842, 0.73947368,\n",
       "       0.79157895, 0.84368421, 0.89578947, 0.94789474, 1.        ])},\n",
       "             scoring='roc_auc')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# (2nd round of feature reduction) Remove features with coef 0 and run lasso logistic regression again\n",
    "X_train_reduced_2 = X_train.loc[:,sortedCoefs[sortedCoefs>0].index]\n",
    "X_test_reduced_2 = X_test.loc[:,sortedCoefs[sortedCoefs>0].index]\n",
    "grid_log_reduced_2 = GridSearchCV(estimator = logReg, param_grid = params, cv = 3, scoring='roc_auc')\n",
    "grid_log_reduced_2.fit(X_train_reduced_2, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method BaseEstimator.get_params of LogisticRegression(C=0.11421052631578947, class_weight='balanced',\n",
       "                   max_iter=2000, penalty='l1', solver='liblinear')>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_log_reduced_2.best_estimator_.get_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Threshold</th>\n",
       "      <th>F1</th>\n",
       "      <th>ROC_AUC</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.306849</td>\n",
       "      <td>0.650528</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.419392</td>\n",
       "      <td>0.182410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.105263</td>\n",
       "      <td>0.309839</td>\n",
       "      <td>0.654491</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.432587</td>\n",
       "      <td>0.184846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.110526</td>\n",
       "      <td>0.313559</td>\n",
       "      <td>0.660116</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.442341</td>\n",
       "      <td>0.187500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.115789</td>\n",
       "      <td>0.318966</td>\n",
       "      <td>0.668058</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.456110</td>\n",
       "      <td>0.191379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.121053</td>\n",
       "      <td>0.322440</td>\n",
       "      <td>0.673021</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.464716</td>\n",
       "      <td>0.193886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.126316</td>\n",
       "      <td>0.325991</td>\n",
       "      <td>0.677985</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.473322</td>\n",
       "      <td>0.196460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.131579</td>\n",
       "      <td>0.330112</td>\n",
       "      <td>0.683610</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.483075</td>\n",
       "      <td>0.199461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.136842</td>\n",
       "      <td>0.334337</td>\n",
       "      <td>0.689236</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.492828</td>\n",
       "      <td>0.202555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.142105</td>\n",
       "      <td>0.339190</td>\n",
       "      <td>0.695523</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.503729</td>\n",
       "      <td>0.206128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.147368</td>\n",
       "      <td>0.344453</td>\n",
       "      <td>0.702141</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.515204</td>\n",
       "      <td>0.210028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.152632</td>\n",
       "      <td>0.347690</td>\n",
       "      <td>0.706112</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.522088</td>\n",
       "      <td>0.212440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.157895</td>\n",
       "      <td>0.350434</td>\n",
       "      <td>0.709421</td>\n",
       "      <td>0.956897</td>\n",
       "      <td>0.527826</td>\n",
       "      <td>0.214493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.163158</td>\n",
       "      <td>0.351719</td>\n",
       "      <td>0.709743</td>\n",
       "      <td>0.948276</td>\n",
       "      <td>0.534710</td>\n",
       "      <td>0.215898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.168421</td>\n",
       "      <td>0.355699</td>\n",
       "      <td>0.714376</td>\n",
       "      <td>0.948276</td>\n",
       "      <td>0.542742</td>\n",
       "      <td>0.218905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.173684</td>\n",
       "      <td>0.359771</td>\n",
       "      <td>0.719009</td>\n",
       "      <td>0.948276</td>\n",
       "      <td>0.550775</td>\n",
       "      <td>0.221998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.178947</td>\n",
       "      <td>0.360791</td>\n",
       "      <td>0.719501</td>\n",
       "      <td>0.943966</td>\n",
       "      <td>0.554791</td>\n",
       "      <td>0.223014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.184211</td>\n",
       "      <td>0.365915</td>\n",
       "      <td>0.725126</td>\n",
       "      <td>0.943966</td>\n",
       "      <td>0.564544</td>\n",
       "      <td>0.226943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.189474</td>\n",
       "      <td>0.370558</td>\n",
       "      <td>0.730090</td>\n",
       "      <td>0.943966</td>\n",
       "      <td>0.573150</td>\n",
       "      <td>0.230526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.194737</td>\n",
       "      <td>0.372968</td>\n",
       "      <td>0.731906</td>\n",
       "      <td>0.939655</td>\n",
       "      <td>0.579461</td>\n",
       "      <td>0.232657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.375433</td>\n",
       "      <td>0.733721</td>\n",
       "      <td>0.935345</td>\n",
       "      <td>0.585772</td>\n",
       "      <td>0.234848</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Threshold        F1   ROC_AUC    Recall  Accuracy  Precision\n",
       "0    0.100000  0.306849  0.650528  0.965517  0.419392   0.182410\n",
       "1    0.105263  0.309839  0.654491  0.956897  0.432587   0.184846\n",
       "2    0.110526  0.313559  0.660116  0.956897  0.442341   0.187500\n",
       "3    0.115789  0.318966  0.668058  0.956897  0.456110   0.191379\n",
       "4    0.121053  0.322440  0.673021  0.956897  0.464716   0.193886\n",
       "5    0.126316  0.325991  0.677985  0.956897  0.473322   0.196460\n",
       "6    0.131579  0.330112  0.683610  0.956897  0.483075   0.199461\n",
       "7    0.136842  0.334337  0.689236  0.956897  0.492828   0.202555\n",
       "8    0.142105  0.339190  0.695523  0.956897  0.503729   0.206128\n",
       "9    0.147368  0.344453  0.702141  0.956897  0.515204   0.210028\n",
       "10   0.152632  0.347690  0.706112  0.956897  0.522088   0.212440\n",
       "11   0.157895  0.350434  0.709421  0.956897  0.527826   0.214493\n",
       "12   0.163158  0.351719  0.709743  0.948276  0.534710   0.215898\n",
       "13   0.168421  0.355699  0.714376  0.948276  0.542742   0.218905\n",
       "14   0.173684  0.359771  0.719009  0.948276  0.550775   0.221998\n",
       "15   0.178947  0.360791  0.719501  0.943966  0.554791   0.223014\n",
       "16   0.184211  0.365915  0.725126  0.943966  0.564544   0.226943\n",
       "17   0.189474  0.370558  0.730090  0.943966  0.573150   0.230526\n",
       "18   0.194737  0.372968  0.731906  0.939655  0.579461   0.232657\n",
       "19   0.200000  0.375433  0.733721  0.935345  0.585772   0.234848"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "change_threshold(grid_log_reduced_2, threshold_list,X_test_reduced_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('abn_percent', 'Bilirubin - Urine - Hematology')                       0.080661\n",
       "('below_min', 'Chloride - Blood - Chemistry')                           0.080354\n",
       "('below_min', 'Glucose - Blood - Chemistry')                            0.074815\n",
       "('abn_percent', 'Hemoglobin - Blood - Hematology')                      0.071902\n",
       "('above_max', 'Hematocrit - Blood - Hematology')                        0.067621\n",
       "('max', 'Calcium, Total - Blood - Chemistry')                           0.059431\n",
       "('abn_percent', 'MCHC - Blood - Hematology')                            0.058691\n",
       "('above_max', 'Troponin T - Blood - Chemistry')                         0.056956\n",
       "('abn_percent', 'Sodium - Blood - Chemistry')                           0.047744\n",
       "('abn_percent', 'Glucose - Blood - Chemistry')                          0.044400\n",
       "('abn_percent', 'MCV - Blood - Hematology')                             0.033307\n",
       "('above_max', 'Magnesium - Blood - Chemistry')                          0.031015\n",
       "('max', 'Estimated GFR (MDRD equation) - Blood - Chemistry')            0.025817\n",
       "('below_min', 'Calcium, Total - Blood - Chemistry')                     0.019662\n",
       "('above_max', 'Potassium - Blood - Chemistry')                          0.015267\n",
       "('below_min', 'Bicarbonate - Blood - Chemistry')                       -0.010837\n",
       "('min', 'Troponin T - Blood - Chemistry')                              -0.017103\n",
       "('below_min', 'Magnesium - Blood - Chemistry')                         -0.017874\n",
       "('above_max', 'Urea Nitrogen - Blood - Chemistry')                     -0.018968\n",
       "('above_max', 'MCH - Blood - Hematology')                              -0.022338\n",
       "('abn_percent', 'Magnesium - Blood - Chemistry')                       -0.023334\n",
       "('below_min', 'MCV - Blood - Hematology')                              -0.024362\n",
       "('above_max', 'Calcium, Total - Blood - Chemistry')                    -0.025047\n",
       "('abn_percent', 'Phosphate - Blood - Chemistry')                       -0.026039\n",
       "('below_min', 'RDW - Blood - Hematology')                              -0.034538\n",
       "('above_max', 'MCV - Blood - Hematology')                              -0.038614\n",
       "('below_min', 'Potassium - Blood - Chemistry')                         -0.040759\n",
       "('min', 'Glucose - Blood - Chemistry')                                 -0.042286\n",
       "('abn_percent', 'Anion Gap - Blood - Chemistry')                       -0.043462\n",
       "('above_max', 'Bilirubin - Urine - Hematology')                        -0.046200\n",
       "('abn_percent', 'Platelet Count - Blood - Hematology')                 -0.053259\n",
       "ed_length                                                              -0.062738\n",
       "('min', 'Creatine Kinase, MB Isoenzyme - Blood - Chemistry')           -0.067247\n",
       "ethnicity_ASIAN                                                        -0.067547\n",
       "('above_max', 'Hemoglobin - Blood - Hematology')                       -0.075625\n",
       "('abn_percent', 'Calcium, Total - Blood - Chemistry')                  -0.076719\n",
       "('abn_percent', 'Creatine Kinase, MB Isoenzyme - Blood - Chemistry')   -0.077972\n",
       "('min', 'Bilirubin - Urine - Hematology')                              -0.081334\n",
       "('min', 'White Blood Cells - Blood - Hematology')                      -0.090139\n",
       "('above_max', 'RDW - Blood - Hematology')                              -0.094814\n",
       "('min', 'Potassium - Blood - Chemistry')                               -0.097489\n",
       "('above_max', 'Bicarbonate - Blood - Chemistry')                       -0.102330\n",
       "('min', 'Creatinine - Blood - Chemistry')                              -0.107151\n",
       "('min', 'Platelet Count - Blood - Hematology')                         -0.126112\n",
       "('above_max', 'MCHC - Blood - Hematology')                             -0.134917\n",
       "('abn_percent', 'White Blood Cells - Blood - Hematology')              -0.154399\n",
       "('max', 'MCHC - Blood - Hematology')                                   -0.234467\n",
       "('above_max', 'Sodium - Blood - Chemistry')                            -0.303672\n",
       "('above_max', 'Anion Gap - Blood - Chemistry')                         -0.330114\n",
       "('below_min', 'Urea Nitrogen - Blood - Chemistry')                     -0.346219\n",
       "dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "est_coefs = pd.Series(grid_log_reduced_2.best_estimator_.coef_[0], index=X_test_reduced_2.columns)\n",
    "sortedCoefs = est_coefs.sort_values(ascending=False)\n",
    "sortedCoefs.tail(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6970, 77)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_reduced_2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gather Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gather_metrics(model_list):\n",
    "    '''\n",
    "    Gathers metrics from models in model_list and returns a dataframe of gathered metrics.\n",
    "    '''\n",
    "    metrics = pd.DataFrame(columns = ['Model','F1','ROC_AUC','Recall','Accuracy','Precision'])\n",
    "    \n",
    "    for model, model_name, X in model_list:\n",
    "        pred = model.best_estimator_.predict(X)\n",
    "        \n",
    "        f1 = f1_score(y_test, pred)\n",
    "        roc_auc = roc_auc_score(y_test, pred)\n",
    "        recall = recall_score(y_test, pred)\n",
    "        accuracy = accuracy_score(y_test, pred)\n",
    "        precision = precision_score(y_test, pred)\n",
    "        \n",
    "        metrics = metrics.append({'Model':model_name,\n",
    "                                  'F1':f1,\n",
    "                                  'ROC_AUC':roc_auc,\n",
    "                                  'Recall':recall,\n",
    "                                  'Accuracy':accuracy,\n",
    "                                  'Precision':precision}\n",
    "                                 ,ignore_index=True)\n",
    "#         print(model_name,' processed')\n",
    "    return metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>F1</th>\n",
       "      <th>ROC_AUC</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>initial logistic</td>\n",
       "      <td>0.479889</td>\n",
       "      <td>0.768278</td>\n",
       "      <td>0.745690</td>\n",
       "      <td>0.784854</td>\n",
       "      <td>0.353783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>post RFECV</td>\n",
       "      <td>0.478992</td>\n",
       "      <td>0.765623</td>\n",
       "      <td>0.737069</td>\n",
       "      <td>0.786575</td>\n",
       "      <td>0.354772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>post lasso</td>\n",
       "      <td>0.478992</td>\n",
       "      <td>0.765623</td>\n",
       "      <td>0.737069</td>\n",
       "      <td>0.786575</td>\n",
       "      <td>0.354772</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Model        F1   ROC_AUC    Recall  Accuracy  Precision\n",
       "0  initial logistic  0.479889  0.768278  0.745690  0.784854   0.353783\n",
       "1        post RFECV  0.478992  0.765623  0.737069  0.786575   0.354772\n",
       "2        post lasso  0.478992  0.765623  0.737069  0.786575   0.354772"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_list=[(grid_log,'initial logistic',X_test), \n",
    "            (grid_log_reduced,'post RFECV',X_test_reduced), \n",
    "            (grid_log_reduced_2, 'post lasso', X_test_reduced_2)\n",
    "           ]\n",
    "gather_metrics(model_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gather Best Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>features</th>\n",
       "      <th>initial logistic</th>\n",
       "      <th>features</th>\n",
       "      <th>post RFECV</th>\n",
       "      <th>features</th>\n",
       "      <th>post lasso</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>0.815232</td>\n",
       "      <td>age</td>\n",
       "      <td>0.814711</td>\n",
       "      <td>age</td>\n",
       "      <td>0.814702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>gender</td>\n",
       "      <td>0.686379</td>\n",
       "      <td>diabetes</td>\n",
       "      <td>0.623030</td>\n",
       "      <td>diabetes</td>\n",
       "      <td>0.623012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>hypertension</td>\n",
       "      <td>0.561342</td>\n",
       "      <td>hypertension</td>\n",
       "      <td>0.585218</td>\n",
       "      <td>hypertension</td>\n",
       "      <td>0.585221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>diabetes</td>\n",
       "      <td>0.535993</td>\n",
       "      <td>('max', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.563595</td>\n",
       "      <td>('max', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.563538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>('max', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.534779</td>\n",
       "      <td>('max', 'Bicarbonate - Blood - Chemistry')</td>\n",
       "      <td>0.535398</td>\n",
       "      <td>('max', 'Bicarbonate - Blood - Chemistry')</td>\n",
       "      <td>0.535347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>('max', 'Bicarbonate - Blood - Chemistry')</td>\n",
       "      <td>0.514908</td>\n",
       "      <td>gender</td>\n",
       "      <td>0.506123</td>\n",
       "      <td>gender</td>\n",
       "      <td>0.394664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>('below_min', 'Urea Nitrogen - Blood - Chemist...</td>\n",
       "      <td>0.322818</td>\n",
       "      <td>('below_min', 'Urea Nitrogen - Blood - Chemist...</td>\n",
       "      <td>0.346214</td>\n",
       "      <td>('below_min', 'Urea Nitrogen - Blood - Chemist...</td>\n",
       "      <td>0.346224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>('above_max', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.303634</td>\n",
       "      <td>('above_max', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.330089</td>\n",
       "      <td>('above_max', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.330132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>('min', 'Urea Nitrogen - Blood - Chemistry')</td>\n",
       "      <td>0.292468</td>\n",
       "      <td>('min', 'Urea Nitrogen - Blood - Chemistry')</td>\n",
       "      <td>0.328356</td>\n",
       "      <td>('min', 'Urea Nitrogen - Blood - Chemistry')</td>\n",
       "      <td>0.328272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>('above_max', 'Sodium - Blood - Chemistry')</td>\n",
       "      <td>0.270294</td>\n",
       "      <td>('above_max', 'Sodium - Blood - Chemistry')</td>\n",
       "      <td>0.303642</td>\n",
       "      <td>('above_max', 'Sodium - Blood - Chemistry')</td>\n",
       "      <td>0.303692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>('max', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.251391</td>\n",
       "      <td>atherosclero</td>\n",
       "      <td>0.293123</td>\n",
       "      <td>atherosclero</td>\n",
       "      <td>0.293157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ethnicity_BLACK/AFRICAN AMERICAN</td>\n",
       "      <td>0.205590</td>\n",
       "      <td>ethnicity_BLACK/AFRICAN AMERICAN</td>\n",
       "      <td>0.288886</td>\n",
       "      <td>ethnicity_BLACK/AFRICAN AMERICAN</td>\n",
       "      <td>0.288906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>('abn_percent', 'Troponin T - Blood - Chemistry')</td>\n",
       "      <td>0.173041</td>\n",
       "      <td>('max', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.234477</td>\n",
       "      <td>('max', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.234349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>insurance_Medicare</td>\n",
       "      <td>0.145199</td>\n",
       "      <td>insurance_Medicare</td>\n",
       "      <td>0.189657</td>\n",
       "      <td>insurance_Medicare</td>\n",
       "      <td>0.189653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>('max', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.145111</td>\n",
       "      <td>('max', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.178616</td>\n",
       "      <td>('max', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.178582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>('abn_percent', 'White Blood Cells - Blood - H...</td>\n",
       "      <td>0.139551</td>\n",
       "      <td>('abn_percent', 'Troponin T - Blood - Chemistry')</td>\n",
       "      <td>0.174427</td>\n",
       "      <td>('abn_percent', 'Troponin T - Blood - Chemistry')</td>\n",
       "      <td>0.174435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>('abn_percent', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.138343</td>\n",
       "      <td>('min', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.160936</td>\n",
       "      <td>('min', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.161116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>('min', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.134595</td>\n",
       "      <td>('abn_percent', 'White Blood Cells - Blood - H...</td>\n",
       "      <td>0.154401</td>\n",
       "      <td>('abn_percent', 'White Blood Cells - Blood - H...</td>\n",
       "      <td>0.154393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>('below_min', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.130755</td>\n",
       "      <td>('abn_percent', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.151527</td>\n",
       "      <td>('abn_percent', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.151529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>atherosclero</td>\n",
       "      <td>0.127682</td>\n",
       "      <td>('below_min', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.147225</td>\n",
       "      <td>('below_min', 'Anion Gap - Blood - Chemistry')</td>\n",
       "      <td>0.147198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>('abn_percent', 'Urea Nitrogen - Blood - Chemi...</td>\n",
       "      <td>0.121413</td>\n",
       "      <td>('below_min', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.137099</td>\n",
       "      <td>('below_min', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.137046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>('above_max', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.120834</td>\n",
       "      <td>('above_max', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.134923</td>\n",
       "      <td>('above_max', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.134925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>('min', 'Platelet Count - Blood - Hematology')</td>\n",
       "      <td>0.119009</td>\n",
       "      <td>('abn_percent', 'Creatinine - Blood - Chemistry')</td>\n",
       "      <td>0.131003</td>\n",
       "      <td>('abn_percent', 'Creatinine - Blood - Chemistry')</td>\n",
       "      <td>0.130992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>('abn_percent', 'Creatinine - Blood - Chemistry')</td>\n",
       "      <td>0.117334</td>\n",
       "      <td>('min', 'Platelet Count - Blood - Hematology')</td>\n",
       "      <td>0.126115</td>\n",
       "      <td>('min', 'Platelet Count - Blood - Hematology')</td>\n",
       "      <td>0.126116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>('above_max', 'Glucose - Blood - Chemistry')</td>\n",
       "      <td>0.115655</td>\n",
       "      <td>('abn_percent', 'Urea Nitrogen - Blood - Chemi...</td>\n",
       "      <td>0.117548</td>\n",
       "      <td>('abn_percent', 'Urea Nitrogen - Blood - Chemi...</td>\n",
       "      <td>0.117553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>('above_max', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.113521</td>\n",
       "      <td>('above_max', 'Glucose - Blood - Chemistry')</td>\n",
       "      <td>0.115855</td>\n",
       "      <td>('above_max', 'Glucose - Blood - Chemistry')</td>\n",
       "      <td>0.115851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>('below_min', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.112901</td>\n",
       "      <td>('above_max', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.111638</td>\n",
       "      <td>('above_max', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.111638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>('min', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.090842</td>\n",
       "      <td>('min', 'Creatinine - Blood - Chemistry')</td>\n",
       "      <td>0.107158</td>\n",
       "      <td>('min', 'Creatinine - Blood - Chemistry')</td>\n",
       "      <td>0.107164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>('min', 'White Blood Cells - Blood - Hematology')</td>\n",
       "      <td>0.086554</td>\n",
       "      <td>('above_max', 'Bicarbonate - Blood - Chemistry')</td>\n",
       "      <td>0.102400</td>\n",
       "      <td>('above_max', 'Bicarbonate - Blood - Chemistry')</td>\n",
       "      <td>0.102326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>('abn_percent', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.081924</td>\n",
       "      <td>('min', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.101974</td>\n",
       "      <td>('min', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.101962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>('mean', 'Magnesium - Blood - Chemistry')</td>\n",
       "      <td>0.077115</td>\n",
       "      <td>('min', 'Potassium - Blood - Chemistry')</td>\n",
       "      <td>0.097490</td>\n",
       "      <td>('min', 'Potassium - Blood - Chemistry')</td>\n",
       "      <td>0.097470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>('min', 'Potassium - Blood - Chemistry')</td>\n",
       "      <td>0.076073</td>\n",
       "      <td>('above_max', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.094796</td>\n",
       "      <td>('above_max', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.094962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>('min', 'Creatinine - Blood - Chemistry')</td>\n",
       "      <td>0.075128</td>\n",
       "      <td>('min', 'MCV - Blood - Hematology')</td>\n",
       "      <td>0.091496</td>\n",
       "      <td>('min', 'MCV - Blood - Hematology')</td>\n",
       "      <td>0.091566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>('below_min', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.071319</td>\n",
       "      <td>('min', 'White Blood Cells - Blood - Hematology')</td>\n",
       "      <td>0.090138</td>\n",
       "      <td>('min', 'White Blood Cells - Blood - Hematology')</td>\n",
       "      <td>0.090142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>('below_min', 'Glucose - Blood - Chemistry')</td>\n",
       "      <td>0.069240</td>\n",
       "      <td>('abn_percent', 'Bicarbonate - Blood - Chemist...</td>\n",
       "      <td>0.088326</td>\n",
       "      <td>('abn_percent', 'Bicarbonate - Blood - Chemist...</td>\n",
       "      <td>0.088253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>('min', 'Bilirubin - Urine - Hematology')</td>\n",
       "      <td>0.068700</td>\n",
       "      <td>('abn_percent', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.088055</td>\n",
       "      <td>('abn_percent', 'PT - Blood - Hematology')</td>\n",
       "      <td>0.088062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>('abn_percent', 'Bilirubin - Urine - Hematology')</td>\n",
       "      <td>0.068596</td>\n",
       "      <td>('above_max', 'Creatine Kinase, MB Isoenzyme -...</td>\n",
       "      <td>0.087754</td>\n",
       "      <td>('above_max', 'Creatine Kinase, MB Isoenzyme -...</td>\n",
       "      <td>0.087791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>('max', 'Sodium - Blood - Chemistry')</td>\n",
       "      <td>0.065829</td>\n",
       "      <td>('below_min', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.087434</td>\n",
       "      <td>('below_min', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.087575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>('above_max', 'Creatine Kinase, MB Isoenzyme -...</td>\n",
       "      <td>0.065575</td>\n",
       "      <td>('mean', 'Magnesium - Blood - Chemistry')</td>\n",
       "      <td>0.085762</td>\n",
       "      <td>('mean', 'Magnesium - Blood - Chemistry')</td>\n",
       "      <td>0.085755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>('abn_percent', 'Creatine Kinase, MB Isoenzyme...</td>\n",
       "      <td>0.064048</td>\n",
       "      <td>('max', 'Sodium - Blood - Chemistry')</td>\n",
       "      <td>0.084207</td>\n",
       "      <td>('max', 'Sodium - Blood - Chemistry')</td>\n",
       "      <td>0.084234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>('above_max', 'RDW - Blood - Hematology')</td>\n",
       "      <td>0.063676</td>\n",
       "      <td>('min', 'Bilirubin - Urine - Hematology')</td>\n",
       "      <td>0.081367</td>\n",
       "      <td>('min', 'Bilirubin - Urine - Hematology')</td>\n",
       "      <td>0.081364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>('abn_percent', 'Calcium, Total - Blood - Chem...</td>\n",
       "      <td>0.062695</td>\n",
       "      <td>('abn_percent', 'Bilirubin - Urine - Hematology')</td>\n",
       "      <td>0.080661</td>\n",
       "      <td>('abn_percent', 'Bilirubin - Urine - Hematology')</td>\n",
       "      <td>0.080665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>('above_max', 'Bicarbonate - Blood - Chemistry')</td>\n",
       "      <td>0.061555</td>\n",
       "      <td>('below_min', 'Chloride - Blood - Chemistry')</td>\n",
       "      <td>0.080349</td>\n",
       "      <td>('below_min', 'Chloride - Blood - Chemistry')</td>\n",
       "      <td>0.080351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>('below_min', 'Chloride - Blood - Chemistry')</td>\n",
       "      <td>0.059838</td>\n",
       "      <td>('abn_percent', 'Creatine Kinase, MB Isoenzyme...</td>\n",
       "      <td>0.077971</td>\n",
       "      <td>('abn_percent', 'Creatine Kinase, MB Isoenzyme...</td>\n",
       "      <td>0.077977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>('abn_percent', 'Bicarbonate - Blood - Chemist...</td>\n",
       "      <td>0.059508</td>\n",
       "      <td>('abn_percent', 'Calcium, Total - Blood - Chem...</td>\n",
       "      <td>0.076730</td>\n",
       "      <td>('abn_percent', 'Calcium, Total - Blood - Chem...</td>\n",
       "      <td>0.076699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>('min', 'MCV - Blood - Hematology')</td>\n",
       "      <td>0.057130</td>\n",
       "      <td>('above_max', 'Hemoglobin - Blood - Hematology')</td>\n",
       "      <td>0.075672</td>\n",
       "      <td>('above_max', 'Hemoglobin - Blood - Hematology')</td>\n",
       "      <td>0.075639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>('abn_percent', 'MCHC - Blood - Hematology')</td>\n",
       "      <td>0.054525</td>\n",
       "      <td>('below_min', 'Glucose - Blood - Chemistry')</td>\n",
       "      <td>0.074818</td>\n",
       "      <td>('below_min', 'Glucose - Blood - Chemistry')</td>\n",
       "      <td>0.074810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>('min', 'Creatine Kinase, MB Isoenzyme - Blood...</td>\n",
       "      <td>0.052401</td>\n",
       "      <td>('abn_percent', 'Hemoglobin - Blood - Hematolo...</td>\n",
       "      <td>0.071897</td>\n",
       "      <td>('abn_percent', 'Hemoglobin - Blood - Hematolo...</td>\n",
       "      <td>0.071889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>('max', 'Calcium, Total - Blood - Chemistry')</td>\n",
       "      <td>0.051623</td>\n",
       "      <td>('above_max', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.067684</td>\n",
       "      <td>('above_max', 'Hematocrit - Blood - Hematology')</td>\n",
       "      <td>0.067645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>('abn_percent', 'Hemoglobin - Blood - Hematolo...</td>\n",
       "      <td>0.050446</td>\n",
       "      <td>ethnicity_ASIAN</td>\n",
       "      <td>0.067507</td>\n",
       "      <td>ethnicity_ASIAN</td>\n",
       "      <td>0.067535</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             features  initial logistic  \\\n",
       "0                                                 age          0.815232   \n",
       "1                                              gender          0.686379   \n",
       "2                                        hypertension          0.561342   \n",
       "3                                            diabetes          0.535993   \n",
       "4            ('max', 'Anion Gap - Blood - Chemistry')          0.534779   \n",
       "5          ('max', 'Bicarbonate - Blood - Chemistry')          0.514908   \n",
       "6   ('below_min', 'Urea Nitrogen - Blood - Chemist...          0.322818   \n",
       "7      ('above_max', 'Anion Gap - Blood - Chemistry')          0.303634   \n",
       "8        ('min', 'Urea Nitrogen - Blood - Chemistry')          0.292468   \n",
       "9         ('above_max', 'Sodium - Blood - Chemistry')          0.270294   \n",
       "10               ('max', 'MCHC - Blood - Hematology')          0.251391   \n",
       "11                   ethnicity_BLACK/AFRICAN AMERICAN          0.205590   \n",
       "12  ('abn_percent', 'Troponin T - Blood - Chemistry')          0.173041   \n",
       "13                                 insurance_Medicare          0.145199   \n",
       "14         ('max', 'Hematocrit - Blood - Hematology')          0.145111   \n",
       "15  ('abn_percent', 'White Blood Cells - Blood - H...          0.139551   \n",
       "16        ('abn_percent', 'RDW - Blood - Hematology')          0.138343   \n",
       "17                ('min', 'RDW - Blood - Hematology')          0.134595   \n",
       "18     ('below_min', 'Anion Gap - Blood - Chemistry')          0.130755   \n",
       "19                                       atherosclero          0.127682   \n",
       "20  ('abn_percent', 'Urea Nitrogen - Blood - Chemi...          0.121413   \n",
       "21         ('above_max', 'MCHC - Blood - Hematology')          0.120834   \n",
       "22     ('min', 'Platelet Count - Blood - Hematology')          0.119009   \n",
       "23  ('abn_percent', 'Creatinine - Blood - Chemistry')          0.117334   \n",
       "24       ('above_max', 'Glucose - Blood - Chemistry')          0.115655   \n",
       "25           ('above_max', 'PT - Blood - Hematology')          0.113521   \n",
       "26   ('below_min', 'Hematocrit - Blood - Hematology')          0.112901   \n",
       "27                 ('min', 'PT - Blood - Hematology')          0.090842   \n",
       "28  ('min', 'White Blood Cells - Blood - Hematology')          0.086554   \n",
       "29         ('abn_percent', 'PT - Blood - Hematology')          0.081924   \n",
       "30          ('mean', 'Magnesium - Blood - Chemistry')          0.077115   \n",
       "31           ('min', 'Potassium - Blood - Chemistry')          0.076073   \n",
       "32          ('min', 'Creatinine - Blood - Chemistry')          0.075128   \n",
       "33         ('below_min', 'MCHC - Blood - Hematology')          0.071319   \n",
       "34       ('below_min', 'Glucose - Blood - Chemistry')          0.069240   \n",
       "35          ('min', 'Bilirubin - Urine - Hematology')          0.068700   \n",
       "36  ('abn_percent', 'Bilirubin - Urine - Hematology')          0.068596   \n",
       "37              ('max', 'Sodium - Blood - Chemistry')          0.065829   \n",
       "38  ('above_max', 'Creatine Kinase, MB Isoenzyme -...          0.065575   \n",
       "39  ('abn_percent', 'Creatine Kinase, MB Isoenzyme...          0.064048   \n",
       "40          ('above_max', 'RDW - Blood - Hematology')          0.063676   \n",
       "41  ('abn_percent', 'Calcium, Total - Blood - Chem...          0.062695   \n",
       "42   ('above_max', 'Bicarbonate - Blood - Chemistry')          0.061555   \n",
       "43      ('below_min', 'Chloride - Blood - Chemistry')          0.059838   \n",
       "44  ('abn_percent', 'Bicarbonate - Blood - Chemist...          0.059508   \n",
       "45                ('min', 'MCV - Blood - Hematology')          0.057130   \n",
       "46       ('abn_percent', 'MCHC - Blood - Hematology')          0.054525   \n",
       "47  ('min', 'Creatine Kinase, MB Isoenzyme - Blood...          0.052401   \n",
       "48      ('max', 'Calcium, Total - Blood - Chemistry')          0.051623   \n",
       "49  ('abn_percent', 'Hemoglobin - Blood - Hematolo...          0.050446   \n",
       "\n",
       "                                             features  post RFECV  \\\n",
       "0                                                 age    0.814711   \n",
       "1                                            diabetes    0.623030   \n",
       "2                                        hypertension    0.585218   \n",
       "3            ('max', 'Anion Gap - Blood - Chemistry')    0.563595   \n",
       "4          ('max', 'Bicarbonate - Blood - Chemistry')    0.535398   \n",
       "5                                              gender    0.506123   \n",
       "6   ('below_min', 'Urea Nitrogen - Blood - Chemist...    0.346214   \n",
       "7      ('above_max', 'Anion Gap - Blood - Chemistry')    0.330089   \n",
       "8        ('min', 'Urea Nitrogen - Blood - Chemistry')    0.328356   \n",
       "9         ('above_max', 'Sodium - Blood - Chemistry')    0.303642   \n",
       "10                                       atherosclero    0.293123   \n",
       "11                   ethnicity_BLACK/AFRICAN AMERICAN    0.288886   \n",
       "12               ('max', 'MCHC - Blood - Hematology')    0.234477   \n",
       "13                                 insurance_Medicare    0.189657   \n",
       "14         ('max', 'Hematocrit - Blood - Hematology')    0.178616   \n",
       "15  ('abn_percent', 'Troponin T - Blood - Chemistry')    0.174427   \n",
       "16                ('min', 'RDW - Blood - Hematology')    0.160936   \n",
       "17  ('abn_percent', 'White Blood Cells - Blood - H...    0.154401   \n",
       "18        ('abn_percent', 'RDW - Blood - Hematology')    0.151527   \n",
       "19     ('below_min', 'Anion Gap - Blood - Chemistry')    0.147225   \n",
       "20   ('below_min', 'Hematocrit - Blood - Hematology')    0.137099   \n",
       "21         ('above_max', 'MCHC - Blood - Hematology')    0.134923   \n",
       "22  ('abn_percent', 'Creatinine - Blood - Chemistry')    0.131003   \n",
       "23     ('min', 'Platelet Count - Blood - Hematology')    0.126115   \n",
       "24  ('abn_percent', 'Urea Nitrogen - Blood - Chemi...    0.117548   \n",
       "25       ('above_max', 'Glucose - Blood - Chemistry')    0.115855   \n",
       "26           ('above_max', 'PT - Blood - Hematology')    0.111638   \n",
       "27          ('min', 'Creatinine - Blood - Chemistry')    0.107158   \n",
       "28   ('above_max', 'Bicarbonate - Blood - Chemistry')    0.102400   \n",
       "29                 ('min', 'PT - Blood - Hematology')    0.101974   \n",
       "30           ('min', 'Potassium - Blood - Chemistry')    0.097490   \n",
       "31          ('above_max', 'RDW - Blood - Hematology')    0.094796   \n",
       "32                ('min', 'MCV - Blood - Hematology')    0.091496   \n",
       "33  ('min', 'White Blood Cells - Blood - Hematology')    0.090138   \n",
       "34  ('abn_percent', 'Bicarbonate - Blood - Chemist...    0.088326   \n",
       "35         ('abn_percent', 'PT - Blood - Hematology')    0.088055   \n",
       "36  ('above_max', 'Creatine Kinase, MB Isoenzyme -...    0.087754   \n",
       "37         ('below_min', 'MCHC - Blood - Hematology')    0.087434   \n",
       "38          ('mean', 'Magnesium - Blood - Chemistry')    0.085762   \n",
       "39              ('max', 'Sodium - Blood - Chemistry')    0.084207   \n",
       "40          ('min', 'Bilirubin - Urine - Hematology')    0.081367   \n",
       "41  ('abn_percent', 'Bilirubin - Urine - Hematology')    0.080661   \n",
       "42      ('below_min', 'Chloride - Blood - Chemistry')    0.080349   \n",
       "43  ('abn_percent', 'Creatine Kinase, MB Isoenzyme...    0.077971   \n",
       "44  ('abn_percent', 'Calcium, Total - Blood - Chem...    0.076730   \n",
       "45   ('above_max', 'Hemoglobin - Blood - Hematology')    0.075672   \n",
       "46       ('below_min', 'Glucose - Blood - Chemistry')    0.074818   \n",
       "47  ('abn_percent', 'Hemoglobin - Blood - Hematolo...    0.071897   \n",
       "48   ('above_max', 'Hematocrit - Blood - Hematology')    0.067684   \n",
       "49                                    ethnicity_ASIAN    0.067507   \n",
       "\n",
       "                                             features  post lasso  \n",
       "0                                                 age    0.814702  \n",
       "1                                            diabetes    0.623012  \n",
       "2                                        hypertension    0.585221  \n",
       "3            ('max', 'Anion Gap - Blood - Chemistry')    0.563538  \n",
       "4          ('max', 'Bicarbonate - Blood - Chemistry')    0.535347  \n",
       "5                                              gender    0.394664  \n",
       "6   ('below_min', 'Urea Nitrogen - Blood - Chemist...    0.346224  \n",
       "7      ('above_max', 'Anion Gap - Blood - Chemistry')    0.330132  \n",
       "8        ('min', 'Urea Nitrogen - Blood - Chemistry')    0.328272  \n",
       "9         ('above_max', 'Sodium - Blood - Chemistry')    0.303692  \n",
       "10                                       atherosclero    0.293157  \n",
       "11                   ethnicity_BLACK/AFRICAN AMERICAN    0.288906  \n",
       "12               ('max', 'MCHC - Blood - Hematology')    0.234349  \n",
       "13                                 insurance_Medicare    0.189653  \n",
       "14         ('max', 'Hematocrit - Blood - Hematology')    0.178582  \n",
       "15  ('abn_percent', 'Troponin T - Blood - Chemistry')    0.174435  \n",
       "16                ('min', 'RDW - Blood - Hematology')    0.161116  \n",
       "17  ('abn_percent', 'White Blood Cells - Blood - H...    0.154393  \n",
       "18        ('abn_percent', 'RDW - Blood - Hematology')    0.151529  \n",
       "19     ('below_min', 'Anion Gap - Blood - Chemistry')    0.147198  \n",
       "20   ('below_min', 'Hematocrit - Blood - Hematology')    0.137046  \n",
       "21         ('above_max', 'MCHC - Blood - Hematology')    0.134925  \n",
       "22  ('abn_percent', 'Creatinine - Blood - Chemistry')    0.130992  \n",
       "23     ('min', 'Platelet Count - Blood - Hematology')    0.126116  \n",
       "24  ('abn_percent', 'Urea Nitrogen - Blood - Chemi...    0.117553  \n",
       "25       ('above_max', 'Glucose - Blood - Chemistry')    0.115851  \n",
       "26           ('above_max', 'PT - Blood - Hematology')    0.111638  \n",
       "27          ('min', 'Creatinine - Blood - Chemistry')    0.107164  \n",
       "28   ('above_max', 'Bicarbonate - Blood - Chemistry')    0.102326  \n",
       "29                 ('min', 'PT - Blood - Hematology')    0.101962  \n",
       "30           ('min', 'Potassium - Blood - Chemistry')    0.097470  \n",
       "31          ('above_max', 'RDW - Blood - Hematology')    0.094962  \n",
       "32                ('min', 'MCV - Blood - Hematology')    0.091566  \n",
       "33  ('min', 'White Blood Cells - Blood - Hematology')    0.090142  \n",
       "34  ('abn_percent', 'Bicarbonate - Blood - Chemist...    0.088253  \n",
       "35         ('abn_percent', 'PT - Blood - Hematology')    0.088062  \n",
       "36  ('above_max', 'Creatine Kinase, MB Isoenzyme -...    0.087791  \n",
       "37         ('below_min', 'MCHC - Blood - Hematology')    0.087575  \n",
       "38          ('mean', 'Magnesium - Blood - Chemistry')    0.085755  \n",
       "39              ('max', 'Sodium - Blood - Chemistry')    0.084234  \n",
       "40          ('min', 'Bilirubin - Urine - Hematology')    0.081364  \n",
       "41  ('abn_percent', 'Bilirubin - Urine - Hematology')    0.080665  \n",
       "42      ('below_min', 'Chloride - Blood - Chemistry')    0.080351  \n",
       "43  ('abn_percent', 'Creatine Kinase, MB Isoenzyme...    0.077977  \n",
       "44  ('abn_percent', 'Calcium, Total - Blood - Chem...    0.076699  \n",
       "45   ('above_max', 'Hemoglobin - Blood - Hematology')    0.075639  \n",
       "46       ('below_min', 'Glucose - Blood - Chemistry')    0.074810  \n",
       "47  ('abn_percent', 'Hemoglobin - Blood - Hematolo...    0.071889  \n",
       "48   ('above_max', 'Hematocrit - Blood - Hematology')    0.067645  \n",
       "49                                    ethnicity_ASIAN    0.067535  "
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gather_best_features(model_list).head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
